package androidmanifestbinary2ascii;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.IOUtils;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;

public class wholeFileRecordReader extends RecordReader<Text, BytesWritable> {
	private FileSplit fileSplit;
	private Configuration conf;
	private byte[] value;
	private boolean processed = false;

	@Override
	public void initialize(InputSplit split, TaskAttemptContext context) throws IOException, InterruptedException {
		this.fileSplit = (FileSplit)split;
		this.conf = context.getConfiguration();	
	}

	@Override
	public boolean nextKeyValue() throws IOException, InterruptedException {
		
		//DO NOT process if we already processed this split (=whole file) 
		if(!processed) {
			byte[] contents = new byte[(int) fileSplit.getLength()];
			Path file = fileSplit.getPath();
			FileSystem fs = file.getFileSystem(conf);
			FSDataInputStream in = null;
			//FileInputStream in = null;

			try{
				in = fs.open(file);
				//put the content of file (in) into 
				//the byte array (contents)
				IOUtils.readFully(in, contents, 0, contents.length);
				value = contents;

			}
			finally{
				IOUtils.closeStream(in);
			}

			processed = true;
			return true;
		}
		
		return false;
	}
	
	@Override 
	/*Here, in our case we have to calculate the HASH of the file, which
	 * will be our KEY
	 * @see org.apache.hadoop.mapreduce.RecordReader#getCurrentKey()
	 */
	public Text getCurrentKey() throws IOException, InterruptedException{
		return new Text(this.fileSplit.getPath().getName());
	}

	@Override
	public BytesWritable getCurrentValue() throws IOException, InterruptedException {
		return new BytesWritable(value);
		
	}
	
	@Override
	public float getProgress() throws IOException {
		return processed ? 0 : 1;
	}
	
	@Override
	public void close() throws IOException {
		//do nothing
	}
}
