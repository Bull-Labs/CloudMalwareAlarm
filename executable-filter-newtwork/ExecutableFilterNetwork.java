
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;

//url https://commons.apache.org/proper/commons-cli/usage.html

import org.apache.commons.io.*;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.Progressable;

public class ExecutableFilterNetwork {
	private String nodeAddr;
	private String databaseName;
	private String tableName;
	private String filename;
    public String hexString;
    private static SQLiteJDBC myDB;
    //private String tableName;
    
	public ExecutableFilterNetwork(String nodeAddr, String databaseName, String tableName) {
		this.nodeAddr = nodeAddr;
		this.databaseName = databaseName;
		this.tableName = tableName;
		
	}
	
	public void read() throws IOException {
		File file = new File(this.filename);
		InputStream is = new FileInputStream(file);
		this.hexString = Hex.encodeHexString(IOUtils.toByteArray(is));
		
	}
	
	public String calculateMD5(String filename) throws IOException {
		//System.err.println("calculatemd5:" + filename);
		File file = new File(filename);
		InputStream is = new FileInputStream(file);
		return DigestUtils.md5Hex(IOUtils.toByteArray(is));
		
	}
	
	public void filterFile(String path, String filename, String userName) throws IOException{
		this.read();
		if(this.hexString.startsWith("4d5a")) {
			System.out.println(filename + " is executable");
			String md5 = this.calculateMD5(filename);
			
			myDB = new SQLiteJDBC(this.tableName);
			myDB.createTable();
			myDB.insertOnTable(path, filename, userName, md5);
	
		}
		else {
			System.out.println(filename + " is not executable");
		}
		
	}
	
	public void filterDirectory(String dirName, String userName, String hdfsDir) throws IOException {
		FileSystem fs = null;
        InputStream in = null;
        OutputStream out = null;
		Configuration conf = new Configuration();
		conf.set("fs.hdfs.impl", org.apache.hadoop.hdfs.DistributedFileSystem.class.getName());
		conf.set("fs.file.impl", org.apache.hadoop.fs.LocalFileSystem.class.getName());
		File dir = new File(dirName);
		
		myDB = new SQLiteJDBC(this.tableName);
		myDB.createTable();
		
		for(File f: dir.listFiles()) {
				if(f.isFile()) {
				in = new BufferedInputStream(new FileInputStream(f.getAbsolutePath()));
				fs = FileSystem.get(URI.create(hdfsDir + "/" + f.getAbsolutePath()), conf);
				
				this.hexString = Hex.encodeHexString(IOUtils.toByteArray(in));
				in.close();
				in = new BufferedInputStream(new FileInputStream(f.getAbsolutePath()));
				
				if(this.hexString.startsWith("4d5a")) {
					System.out.println(f.getName() + " is executable");
					String md5 = this.calculateMD5(f.getAbsolutePath());	
					myDB.insertOnTable(dirName, f.getName(), userName, md5);
					
					out = fs.create(new Path(hdfsDir + "/" +  f.getName()), new Progressable() {
						public void progress() {
							System.out.print(".");
						}
					});
					System.err.println("Copying " + f.getName());
					IOUtils.copy(in, out);
					
				
				}
				in.close();
				out.close();
				/*
				else {
					System.out.println(f.getName() + " is not executable");
				}
				*/
				//System.err.println(f.getName());
			}
		}
	}
	

	public static void main(String[] args) throws IOException {
		
		CommandLineParser parser =  new DefaultParser();
		HelpFormatter helpFormatter = new HelpFormatter();
		Options options = new Options();
		
		options.addOption("n", "node", true, "node to get the data");
		options.addOption("d", "database", true, "database name");
		options.addOption("t", "table", true, "tablename");
		options.addOption("v", "verbose", false, "verbose - debug mode");
		
		String nodeAddr = null;
		String databaseName = null;
		String tableName = null;
		
		try{
			CommandLine line = parser.parse(options, args);
			
			//copy one single file
			if(line.hasOption("n") && line.hasOption("d") 
					&& line.hasOption("t")) {
				nodeAddr = line.getOptionValue("node");
				databaseName = line.getOptionValue("database");
				tableName = line.getOptionValue("table");
				
				ExecutableFilterNetwork ef = new ExecutableFilterNetwork(nodeAddr, databaseName, tableName);
				//ef.filterFile(filename, filename, userName);
				if(line.hasOption("v")) {
					System.out.println("Node " + nodeAddr);
					System.out.println("database: " + databaseName);
					System.out.println("table name: " + tableName);
				
				}
				myDB = new SQLiteJDBC(nodeAddr, databaseName, tableName);
				myDB.fetchTable();
			}
			
			else if(line.hasOption("h")) {
				helpFormatter.printHelp("java -jar file.jar", options);
				
			//no args	
			} else helpFormatter.printHelp("java -jar file.jar", options);			
			
						
		}catch(ParseException ex) {
			System.err.println("Unexpected Exception: " + ex.getMessage());
		}
		
		
	}
}
