import configparser
import os
from random import randint
import sqlite3
import sys


if len(sys.argv) != 2:
  print("usage: %s <submission_name-node>" % sys.argv[0])
  sys.exit(1)
  
config = configparser.ConfigParser()
config.read('clients.cfg')

pathMalwareRepodir = "/home/emanuel/research/repos/mw"
pathRegularFilesRepodir = "/home/emanuel/research/repos/regular"

tableName = sys.argv[1]

############# SQL #################    
try:
  con = sqlite3.connect('test.db')
  cur = con.cursor()
  cur.execute("CREATE TABLE " + tableName +  " (ID INTEGER PRIMARY KEY AUTOINCREMENT, USER TEXT NOT NULL, PATH TEXT NOT NULL, " + 
	       "FILENAME TEXT NOT NULL, ISMALWARE INTEGER )")
except sqlite3.OperationalError:
  print("SQL Error!")
  sys.exit(1)
        
#cur.close()
#con.close()    

for section in config.sections():
    client_id = config.get(section, "ID")
    totalMalwareFiles = config.get(section, "TotalMalwareFiles")
    totalRegularFiles = config.get(section, "TotalRegularFiles")

    #malware file list 
    path, mydir, malwareFilesList = os.walk(pathMalwareRepodir).next()
    mysize = len(malwareFilesList)

    print("Client %s" % client_id)
    for i in range(int(totalMalwareFiles)):
        myindex = randint(0, int(totalMalwareFiles))
        
        cur.execute("INSERT INTO " + tableName + " VALUES (NULL, ?, ?, ?, ?)", 
			(client_id, path, malwareFilesList[myindex], 1))
        con.commit()
        print("index: " + str(myindex))
        print("malware: client " + client_id + " -> " +  malwareFilesList[myindex].decode('utf-8'))

    print("\n")
    
    #regular file list
    path, mydir, regularFilesList = os.walk(pathRegularFilesRepodir).next()
    mysize = len(regularFilesList)

    print("Client %s" % client_id)
    for i in range(int(totalRegularFiles)):
        myindex = randint(0, int(totalRegularFiles))
        print("index: " + str(myindex))
        cur.execute("INSERT INTO " + tableName + " VALUES (NULL, ?, ?, ?, ?)", 
			(client_id, path, regularFilesList[myindex], 0))
        con.commit()
        #print("regular: client %s ->  %s " % (client_id, unicode(regularFilesList[myindex])))
        #print("regular: client " + client_id + " -> " + " %s " % regularFilesList[myindex])
        print("regular: client " + client_id + " -> " +  regularFilesList[myindex].decode('utf-8'))

    print("\n")

    

cur.close()
con.close()


